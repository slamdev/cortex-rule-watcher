// Code generated by MockGen. DO NOT EDIT.
// Source: internal/syncer.go

// Package internal is a generated GoMock package.
package internal

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/prometheus-operator/prometheus-operator/pkg/apis/monitoring/v1"
)

// MockSyncer is a mock of Syncer interface.
type MockSyncer struct {
	ctrl     *gomock.Controller
	recorder *MockSyncerMockRecorder
}

// MockSyncerMockRecorder is the mock recorder for MockSyncer.
type MockSyncerMockRecorder struct {
	mock *MockSyncer
}

// NewMockSyncer creates a new mock instance.
func NewMockSyncer(ctrl *gomock.Controller) *MockSyncer {
	mock := &MockSyncer{ctrl: ctrl}
	mock.recorder = &MockSyncerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncer) EXPECT() *MockSyncerMockRecorder {
	return m.recorder
}

// delete mocks base method.
func (m *MockSyncer) delete(rule v1.PrometheusRule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "delete", rule)
	ret0, _ := ret[0].(error)
	return ret0
}

// delete indicates an expected call of delete.
func (mr *MockSyncerMockRecorder) delete(rule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "delete", reflect.TypeOf((*MockSyncer)(nil).delete), rule)
}

// replace mocks base method.
func (m *MockSyncer) replace(rule v1.PrometheusRule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "replace", rule)
	ret0, _ := ret[0].(error)
	return ret0
}

// replace indicates an expected call of replace.
func (mr *MockSyncerMockRecorder) replace(rule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "replace", reflect.TypeOf((*MockSyncer)(nil).replace), rule)
}
